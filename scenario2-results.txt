SCENARIO 2 (2014-01-06)

Training data: 10 objects per class
Test data: 400 random digits from NIST

29 image features

3NN		  Parzen	Fisher	  NMC		SVC
0.3750    0.3200    0.2550    0.3475    0.2700		Fisher
0.4175    0.4000    0.3425    0.4300    0.3475		Fisher
0.3700    0.3300    0.2475    0.3525    0.2425		Fisher/SVC
0.4700    0.4200    0.2925    0.4625    0.3625		Fisher
0.3800    0.3450    0.3350    0.3850    0.2825		SVC
0.4300    0.3950    0.3125    0.4175    0.2850		SVC
0.4500    0.4125    0.3075    0.4175    0.3275		Fisher
0.4175    0.3825    0.3350    0.4300    0.3000		SVC
0.3825    0.3600    0.3125    0.4025    0.3000		SVC
0.3775    0.3550    0.3000    0.3575    0.2950		SVC

########################################################
--> Added 10x10 pixel values as features after smoothing
Total of 129 image features

3NN		  Parzen	Fisher	  NMC		SVC
0.3050    0.2050    0.5400    0.2350    0.1700		SVC
0.2650    0.2200    0.5800    0.2050    0.1600		SVC
0.2100    0.2050    0.6250    0.2250    0.1900		SVC
0.2800    0.2450    0.5750    0.1650    0.1150		SVC
0.1900    0.1750    0.4300    0.2400    0.1600		SVC
0.2600    0.2250    0.5750    0.2050    0.1550		SVC

--> So SVC is clearly the winner :-)

From here on I start adding pixel values as features. 
We start with downsampled to 12x12 and decrease this.

########################################################
n_trn = gendat(nist_data, 0.01);
n_tst = gendat(nist_data, 0.05);
With 12x12 pixel features (total of 144+29 features)

1NN		  Parzen	Fisher	  NMC		SVC
0.1740    0.1740    0.4140    0.2100    0.1700		SVC
0.2100    0.2100    0.4160    0.2560    0.1800		SVC
0.2240    0.2000    0.4180    0.2200    0.1640		SVC
0.2280    0.2260    0.4100    0.2140    0.1880		SVC


########################################################
n_trn = gendat(nist_data, 0.01);
n_tst = gendat(nist_data, 0.05);
With 10x10 pixel features (total of 129 features)

1NN		  Parzen	Fisher	  NMC		SVC
0.2320    0.2320    0.5060    0.2720    0.1620		SVC
0.2260    0.2280    0.6660    0.2760    0.2180		SVC
0.1660    0.1640    0.5740    0.2300    0.1680		Parzen
0.2360    0.2360    0.6320    0.2380    0.1700		SVC

########################################################
n_trn = gendat(nist_data, 0.01);
n_tst = gendat(nist_data, 0.05);
With 8x8 pixel features (total of 93 features)

1NN		  Parzen	Fisher	  NMC		SVC
0.3020    0.2420    0.5200    0.2460    0.2120		SVC
0.2180    0.2160    0.5680    0.2200    0.2380		Parzen
0.3200    0.2600    0.5620    0.2680    0.2480		SVC
0.3080    0.2580    0.5620    0.2520    0.2180		SVC


########################################################
n_trn = gendat(nist_data, 0.01);
n_tst = gendat(nist_data, 0.05);
With 6x6 pixel features (total of 65 features)

1NN		  Parzen	Fisher	  NMC		SVC
0.2360    0.2320    0.3540    0.2480    0.1960		SVC
0.3040    0.3020    0.5580    0.3340    0.2540		SVC
0.2620    0.2580    0.3240    0.2820    0.2540		SVC
0.2960    0.2220    0.3180    0.2740    0.2120		SVC

########################################################
n_trn = gendat(nist_data, 0.01);
n_tst = gendat(nist_data, 0.05);
With 4x4 pixel features (total of 45 features)

1NN		  Parzen	Fisher	  NMC		SVC
--> Error rates above 30% so stopped this test

########################################################
Conclusion: adding 10x10 rescaled image is best...

From here I tested decreasing the smoothing kernel size
from 2px to 1px and retested the downsampling to 10x10. 
Setting it to 1px increased the error rate to approx 20%.

Error rates for SVC
1px kernel = ~20%
2px kernel = ~16%
3px kernel = ~18%

Conclusion: I set it back to 2px

